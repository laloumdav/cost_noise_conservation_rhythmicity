METHODS[1]
file.dir
Method_name <- regmatches(METHODS[1],regexec("/ (.*?) .txt",METHODS[1]))
Method_name
Method_name <- regmatches(METHODS[1],regexec("/(.*?).txt",METHODS[1]))
Method_name
Method_name <- Method_name[2]
Method_name
Method_name <- regmatches(METHODS[1],regexec("liver/(.*?).txt",METHODS[1]))
Method_name <- Method_name[2]
Method_name
Method_name <- regmatches(METHODS[1],regexec("liver/(.*?).txt",METHODS[1]))
Method_name
Method_name <- Method_name[[2]]
Method_name <- regmatches(METHODS[1],regexec("liver/(.*?).txt",METHODS[1]))
Method_name <- Method_name[[2]]
Method_name <- regmatches(METHODS[1],regexec("liver/(.*?).txt",METHODS[1]))
Method_name
liver
Method_name <- regmatches(METHODS[1],regexec("liver/(.*?).txt",METHODS[1]))
Method_name
Method_name <- regmatches(METHODS[1],regexec("/(.*?).txt",METHODS[1]))
Method_name
paste(tissue,"(.*?).txt", sep="/")
Method_name <- regmatches(METHODS[1],regexec(paste(tissue,"(.*?).txt", sep="/"),METHODS[1]))
Method_name
METHODS[1]
Method_name <- str_match(METHODS[1], paste(tissue,"(.*?).txt", sep="/"))
Method_name
Method_name <- Method_name[,2]
Method_name
pvalues.Table_Species_tissue <- data.frame()
pvalues.Table_Species_tissue[,Method_name] <- Method[[i]]$pvalue
Method_name
class(Method_name)
pvalues.Table_Species_tissue[,Method_name] <- Method[[i]]$pvalue
pvalues.Table_Species_tissue$id <- Method[[i]]$pvalue
pvalues.Table_Species_tissue <- Method[[i]]$pvalue
pvalues.Table_Species_tissue
as.data.frame(Method[[i]]$pvalue)
head(as.data.frame(Method[[i]]$pvalue))
pvalues.Table_Species_tissue[,Method_name] <- as.data.frame(Method[[i]]$pvalue)
pvalues.Table_Species_tissue <- data.frame()
pvalues.Table_Species_tissue[,Method_name] <- as.data.frame(Method[[i]]$pvalue)
pvalues.Table_Species_tissue <- data.frame()
pvalues.Table_Species_tissue$id <- as.data.frame(Method[[i]]$pvalue)
pvalues.Table_Species_tissue <- data.frame()
pvalues.Table_Species_tissue <- rbind(as.data.frame(Method[[i]]$pvalue))
View(pvalues.Table_Species_tissue)
pvalues.Table_Species_tissue <- rbind(pvalues.Table_Species_tissue, as.data.frame(Method[[i]]$pvalue))
pvalues.Table_Species_tissue <- rbind(pvalues.Table_Species_tissue, as.data.frame(Method[[i]]$pvalue))
pvalues.Table_Species_tissue
pvalues.Table_Species_tissue <- data.frame()
pvalues.Table_Species_tissue
i <- 2
Method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
Method
Method[[i]]$pvalue
method_name
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method_name
length(Method[[i]]$pvalue)
length(METHODS)
Method <- NULL
method.pvalues_Vector_Species_tissue <- NULL
method.name_Vector_Species_tissue
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector_Species_tissue <- c(method.pvalues_Vector_Species_tissue, Method[[i]]$pvalue)
method.name_Vector_Species_tissue <- c(method.name_Vector_Species_tissue, rep(method_name, length(Method[[i]]$pvalue)))
}
method <- NULL
method.pvalues_Vector_Species_tissue <- NULL
method.name_Vector_Species_tissue
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector_Species_tissue <- c(method.pvalues_Vector_Species_tissue, Method[[i]]$pvalue)
method.name_Vector_Species_tissue <- c(method.name_Vector_Species_tissue, rep(method_name, length(Method[[i]]$pvalue)))
}
method <- NULL
method.pvalues_Vector_Species_tissue <- NULL
method.name_Vector_Species_tissue <- NULL
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector_Species_tissue <- c(method.pvalues_Vector_Species_tissue, Method[[i]]$pvalue)
method.name_Vector_Species_tissue <- c(method.name_Vector_Species_tissue, rep(method_name, length(Method[[i]]$pvalue)))
}
pvalues.Table_Species_tissue <- data.frame(method.name_Vector_Species_tissue, method.pvalues_Vector_Species_tissue)
View(pvalues.Table_Species_tissue)
method.name_Vector_Species_tissue
method.pvalues_Vector_Species_tissue
i <- 1
method <- NULL
method.pvalues_Vector_Species_tissue <- NULL
method.name_Vector_Species_tissue <- NULL
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method
method[[i]]
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method_name
method.pvalues_Vector_Species_tissue <- c(method.pvalues_Vector_Species_tissue, Method[[i]]$pvalue)
method.pvalues_Vector_Species_tissue
Method[[i]]$pvalue
method <- NULL
method.pvalues_Vector_Species_tissue <- NULL
method.name_Vector_Species_tissue <- NULL
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector_Species_tissue <- c(method.pvalues_Vector_Species_tissue, method[[i]]$pvalue)
method.name_Vector_Species_tissue <- c(method.name_Vector_Species_tissue, rep(method_name, length(method[[i]]$pvalue)))
}
pvalues.Table_Species_tissue <- data.frame(method.name_Vector_Species_tissue, method.pvalues_Vector_Species_tissue)
View(pvalues.Table_Species_tissue)
pvalues.Table_Species_tissue <- data.frame(method=method.name_Vector_Species_tissue, pvalue=method.pvalues_Vector_Species_tissue)
sort(method[[i]]$pvalue)
method <- NULL
method.pvalues_Vector_Species_tissue <- NULL
method.name_Vector_Species_tissue <- NULL
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector_Species_tissue <- c(method.pvalues_Vector_Species_tissue, sort(method[[i]]$pvalue))
method.name_Vector_Species_tissue <- c(method.name_Vector_Species_tissue, rep(method_name, length(method[[i]]$pvalue)))
}
pvalues.Table_Species_tissue <- data.frame(method=method.name_Vector_Species_tissue, pvalue_ranked=method.pvalues_Vector_Species_tissue)
unique(pvalues.Table_Species_tissue$method)
method.name_Vector <- NULL
method <- NULL
method.pvalues_Vector <- NULL
method.rank_Vector <- NULL
method.name_Vector <- NULL
method.pvalues_Vector <- c(method.pvalues_Vector, sort(method[[i]]$pvalue))
method.pvalues_Vector <- c(method.pvalues_Vector, sort(method[[1]]$pvalue))
i
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector <- c(method.pvalues_Vector, sort(method[[i]]$pvalue))
head(method.pvalues_Vector)
length(method[[i]]$pvalue)
METHODS <- c("~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Zebrafish/liver/RAIN.txt",
"~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Zebrafish/liver/empJTK.txt",
"~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Zebrafish/liver/LS.txt",
"~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Zebrafish/liver/ARS.txt",
"~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Zebrafish/liver/JTK.txt",
"~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Zebrafish/liver/meta2d.txt")
method <- NULL
method.pvalues_Vector <- NULL
method.rank_Vector <- NULL
method.name_Vector <- NULL
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector <- c(method.pvalues_Vector, sort(method[[i]]$pvalue))
method.rank_Vector <- c(method.rank_Vector, 1:length(method[[i]]$pvalue))
method.name_Vector <- c(method.name_Vector, rep(method_name, length(method[[i]]$pvalue)))
}
pvalues.Table_Species_tissue <- data.frame(method=method.name_Vector,
pvalue_ranked=method.pvalues_Vector,
rank=method.rank_Vector)
View(pvalues.Table_Species_tissue)
6*15199
method_name
print(paste("Careful !", method_name, "has a different length", sep=" "))
if (i >1 && length(method[[i]]$pvalue) =! length(method[[i-1]]$pvalue)){
print(paste("Careful !", method_name, "has a different length", sep=" "))
}
if (i >1 && length(method[[i]]$pvalue) =! length(method[[i-1]]$pvalue)){
print(paste("Careful !", method_name, "has a different length", sep=" "))
}
if (i >1 & length(method[[i]]$pvalue) =! length(method[[i-1]]$pvalue)){
print(paste("Careful !", method_name, "has a different length", sep=" "))
}
if ((i >1) & (length(method[[i]]$pvalue) =! length(method[[i-1]]$pvalue))) {
print(paste("Careful !", method_name, "has a different length", sep=" "))
}
method <- NULL
method.pvalues_Vector <- NULL
method.rank_Vector <- NULL
method.name_Vector <- NULL
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector <- c(method.pvalues_Vector, sort(method[[i]]$pvalue))
method.rank_Vector <- c(method.rank_Vector, 1:length(method[[i]]$pvalue))
method.name_Vector <- c(method.name_Vector, rep(method_name, length(method[[i]]$pvalue)))
if ((i>1) && (length(method[[i]]$pvalue) =! length(method[[i-1]]$pvalue))) {
print(paste("Careful !", method_name, "has a different length", sep=" "))
}
}
paste("Careful !", method_name, "has a different length", sep=" ")
length(method[[i]]$pvalue)
length(method[[i-1]]$pvalue)
length(method[[i]]$pvalue) =! length(method[[i-1]]$pvalue)
if ((i>1) && (length(method[[i]]$pvalue) != length(method[[i-1]]$pvalue))) {
print(paste("Careful !", method_name, "has a different length", sep=" "))
}
method <- NULL
method.pvalues_Vector <- NULL
method.rank_Vector <- NULL
method.name_Vector <- NULL
for (i in 1:length(METHODS)){
method[[i]] <- read.table(METHODS[i], head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
method_name <- str_match(METHODS[i], paste(tissue,"(.*?).txt", sep="/"))
method_name <- method_name[,2]
method.pvalues_Vector <- c(method.pvalues_Vector, sort(method[[i]]$pvalue))
method.rank_Vector <- c(method.rank_Vector, 1:length(method[[i]]$pvalue))
method.name_Vector <- c(method.name_Vector, rep(method_name, length(method[[i]]$pvalue)))
if ((i>1) && (length(method[[i]]$pvalue) != length(method[[i-1]]$pvalue))) {
print(paste("Careful !", method_name, "has a different length", sep=" "))
}
}
pvalues.Table_Species_tissue <- data.frame(method=method.name_Vector,
pvalue_ranked=method.pvalues_Vector,
rank=method.rank_Vector)
View(pvalues.Table_Species_tissue)
file.dir
pvalues.Table_Species_tissue <- data.frame(method=method.name_Vector,
pvalue_ranked=method.pvalues_Vector,
rank=method.rank_Vector)
write.table(pvalues.Table_Species_tissue, paste(file.dir, "pvalues_ranked.txt", sep=""), row.names = F, quote = F, sep = "\t")
METHODS <- c("RAIN ,empJTK, jean")
METHODS <- "RAIN ,empJTK, jean"
METHODS <- gsub(" ", "", METHODS)
METHODS
METHODS <-
?split
?split
x <- Rle(101:105, 6:2)
x
split(x, c("B", "B", "A", "B", "A"))
?strsplit
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
strsplit(x, "e")
strsplit(METHODS, ",")
METHODS
METHODS
METHODS <- "RAIN ,empJTK, jean"
METHODS
METHODS <- gsub(" ", "", METHODS)
METHODS
strsplit(METHODS, ",")
unlist(strsplit(METHODS, ","))
METHODS <- "RAIN ,empJTK , jean"
METHODS <- gsub(" ", "", METHODS)
METHODS <- unlist(strsplit(METHODS, ","))
METHODS
length(METHODS)
class(METHODS)
i <- 2
METHODS[i]
METHODS.files <- paste(METHODS, ".txt", sep = "")
METHODS.files
i <- 2
method <- NULL
method.pvalues_Vector <- NULL
method.rank_Vector <- NULL
METHODS[i]
file.dir
METHODS.files <- paste(file.dir,METHODS.files, sep = "")
METHODS.files <- paste(METHODS, ".txt", sep = "")
METHODS.files <- paste(file.dir,METHODS.files, sep = "")
METHODS.files
METHODS[i]
file.dir
paste("../R_Objects/", "pvalues_ranked.txt", Species, tissue, sep="")
paste("../R_Objects/", "pvalues_ranked.txt", species, tissue, sep="")
paste("../R_Objects/", "pvalues.ranked_", species, "_", tissue, ".txt", sep="")
species <- "Zebrafish"
tissue <- "liver"
if (species=="Drosophila"|species=="Aedes"|species=="Anopheles"){
class <- "Insects"
} else { class <- "Vertebrates"}
if (dir.exists("/scratch/cluster/monthly/dlaloum/")==TRUE){
file.dir <- paste(paste("/scratch/cluster/monthly/dlaloum/Documents/Workspace/DATA/Protein.coding.genes", class, species, tissue, sep = "/"),"/", sep="")
} else {
file.dir <- paste(paste("~/Documents/Workspace/DATA/Protein.coding.genes", class, species, tissue, sep = "/"),"/", sep="")
}
if (dir.exists(file.dir)==FALSE){
print("ERROR: directory/file doesn't exist. Maybe: Mouse_RNAseq or Mouse_microarray ???")
stop()
}
file.dir
file.name <- paste(file.dir, files[i], sep = "")
files <- list.files(file.dir)
files <- files[grep(tissue, files)]
file.name <- paste(file.dir, files[i], sep = "")
raw_dataset <- read.table(file.name, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
file.name
file.name <- "~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Zebrafish/liver/liver.txt"
raw_dataset <- read.table(file.name, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
View(raw_dataset)
file.name <- "~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Rat/lung/lung.txt"
raw_dataset <- read.table(file.name, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
View(raw_dataset)
ID.transform <- read.table("~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Rat/Rat_ProbID.GeneID.txt", head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
View(ID.transform)
raw_dataset <- merge(ID.transform, raw_dataset, by.x="AFFY.ID", by.y="ID")
length(unique(raw_dataset$AFFY.ID))
length(unique(raw_dataset$Gene.ID))
length(unique(raw_dataset$Gene.Type))
species <- "Zebrafish"
tissue <- "liver"
tissue_file <- paste(tissue, ".txt", sep="")
tissue_file
files
if (species=="Drosophila"|species=="Aedes"|species=="Anopheles"){
class <- "Insects"
} else { class <- "Vertebrates"}
if (dir.exists("/scratch/cluster/monthly/dlaloum/")==TRUE){
file.dir <- paste(paste("/scratch/cluster/monthly/dlaloum/Documents/Workspace/DATA/Protein.coding.genes", class, species, tissue, sep = "/"),"/", sep="")
} else {
file.dir <- paste(paste("~/Documents/Workspace/DATA/Protein.coding.genes", class, species, tissue, sep = "/"),"/", sep="")
}
if (dir.exists(file.dir)==FALSE){
print("ERROR: directory/file doesn't exist. Maybe: Mouse_RNAseq or Mouse_microarray ???")
stop()
}
file.name <- paste(file.dir, files, sep = "")
file.name
file.name <- "~/Documents/Workspace/DATA/Protein.coding.genes/Vertebrates/Rat/lung/lung.txt"
raw_dataset <- read.table(file.name, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
IDs.crossRef_dir <- paste(paste("~/Documents/Workspace/DATA/Protein.coding.genes", class, species, sep = "/"),"/", sep="")
IDs.crossRef_dir
list.files(IDs.crossRef_dir)
list.files(IDs.crossRef_dir, all.files = TRUE)
list.files(IDs.crossRef_dir, include.dirs = FALSE)
list.files(IDs.crossRef_dir, include.dirs = TRUE)
list.files()
list.files(IDs.crossRef_dir, pattern = "ID")
length(list.files(IDs.crossRef_dir, pattern = "ID"))!=1
IDs.crossRef <- read.table(list.files(IDs.crossRef_dir, pattern = "ID"), head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
list.files(IDs.crossRef_dir, pattern = "ID")
IDs.crossRef_dir
IDs.crossRef_file <- paste(IDs.crossRef_dir, list.files(IDs.crossRef_dir, pattern = "ID"))
IDs.crossRef_file
IDs.crossRef_file <- paste(IDs.crossRef_dir, list.files(IDs.crossRef_dir, pattern = "ID", sep=""))
IDs.crossRef_file <- paste(IDs.crossRef_dir, list.files(IDs.crossRef_dir, pattern = "ID"), sep="")
IDs.crossRef_file
IDs.crossRef <- read.table(IDs.crossRef_file, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
View(IDs.crossRef)
species <- "Rat"
tissue <- "lung"
tissue_file <- paste(tissue, ".txt", sep="")
files <- list.files(file.dir)
files <- files[grep(tissue, files)]
if (species=="Drosophila"|species=="Aedes"|species=="Anopheles"){
class <- "Insects"
} else { class <- "Vertebrates"}
if (dir.exists("/scratch/cluster/monthly/dlaloum/")==TRUE){
file.dir <- paste(paste("/scratch/cluster/monthly/dlaloum/Documents/Workspace/DATA/Protein.coding.genes", class, species, tissue, sep = "/"),"/", sep="")
IDs.crossRef_dir <- paste(paste("/scratch/cluster/monthly/dlaloum/Documents/Workspace/DATA/Protein.coding.genes", class, species, sep = "/"),"/", sep="")
} else {
file.dir <- paste(paste("~/Documents/Workspace/DATA/Protein.coding.genes", class, species, tissue, sep = "/"),"/", sep="")
IDs.crossRef_dir <- paste(paste("~/Documents/Workspace/DATA/Protein.coding.genes", class, species, sep = "/"),"/", sep="")
}
if (dir.exists(file.dir)==FALSE){
print("ERROR: directory/file doesn't exist. Maybe: Mouse_RNAseq or Mouse_microarray ???")
stop()
}
if (length(list.files(IDs.crossRef_dir, pattern = "ID"))!=1){
print("ERROR: IDs.crossReference_file doesn't exist or isn't unique. Should be a unique file in /Workspace/DATA/Protein.coding.genes/class/species/  directory")
stop()
}
IDs.crossRef_file <- paste(IDs.crossRef_dir, list.files(IDs.crossRef_dir, pattern = "ID"), sep="")
IDs.crossRef <- read.table(IDs.crossRef_file, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
file.name <- paste(file.dir, files, sep = "")
file.name
IDs.crossRef_dir
IDs.crossRef_file <- paste(IDs.crossRef_dir, list.files(IDs.crossRef_dir, pattern = "ID"), sep="")
IDs.crossRef <- read.table(IDs.crossRef_file, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
file.name <- paste(file.dir, files, sep = "")
raw_dataset <- read.table(file.name, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
file.name
file.name <- paste(file.dir, files, sep = "")
file.name
files
file.name <- paste(file.dir, tissue, sep = "")
file.name
tissue_file
file.name <- paste(file.dir, tissue_file, sep = "")
file.name
raw_dataset <- read.table(file.name, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
raw_dataset <- merge(ID.transform, raw_dataset, by.x="AFFY.ID", by.y="ID")
View(raw_dataset)
raw_dataset <- read.table(file.name, head=TRUE, check.names = FALSE, stringsAsFactors = FALSE)
apply(IDs.crossRef, 1, function(x) which(x == "1367455_at"))
?apply
apply(IDs.crossRef, 1, function(x) which(x == "1367455_at"), na.rm = TRUE)
apply(IDs.crossRef, 1, function(x) which(x == "1367455_at", na.rm = TRUE))
unlist(apply(IDs.crossRef, 1, function(x) which(x == "1367455_at")))
unlist(apply(IDs.crossRef, 1, function(x) which(x == c("1367455_at", "1367465_at"))))
unlist(apply(IDs.crossRef, 1, function(x) which(x == c("7635", "1367465_at"))))
unlist(apply(IDs.crossRef, 1, function(x) which(x == "7635")))
unlist(apply(IDs.crossRef, 1, function(x) which(x == "1367465_at")))
unlist(apply(IDs.crossRef, 1, function(x) which(x == "1367465_at" | x == "3442")))
unlist(apply(IDs.crossRef, 1, function(x) which(x == "3442545" | x == "3442")))
unlist(apply(IDs.crossRef, 1, function(x) which(x == "3442545" | x == "3442"))) == integer(0)
length(unlist(apply(IDs.crossRef, 1, function(x) which(x == "3442545" | x == "3442"))))
length(unlist(apply(IDs.crossRef, 1, function(x) which(x == "1367455_at" | x == "3442"))))
length(unlist(apply(IDs.crossRef, 1, function(x) which(x == "1367455_at" | x == "1367486_at"))))
raw_dataset$ID[1]
length(unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] ))))
unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] )))
length(unique(unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] )))))
length(unique(unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] ))))) != 1
unique(unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] ))))
unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] )))
test <- unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] )))
test
Column.number <- unique(unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] ))))
Column.number
?merge
raw_dataset.merged <- merge(IDs.crossRef, raw_dataset, by.x=Column.number, by.y="ID")
View(raw_dataset.merged)
"Gene.Type" %in% colnames(raw_dataset.merged)
# Keeping Protein.coding.genes:
if ("Gene.Type" %in% colnames(raw_dataset.merged)){
raw_dataset.merged <- subset(raw_dataset.merged, Gene.Type=="protein_coding")
}
raw_dataset.Genes <- raw_dataset.merged[,c("Gene.ID"|"GeneID")]
raw_dataset.Genes <- raw_dataset.merged[,c("Gene.ID|GeneID")]
raw_dataset.Genes <- raw_dataset.merged[,c("Gene.ID||GeneID")]
raw_dataset.Genes <- raw_dataset.merged[,c("Gene.ID"||"GeneID")]
raw_dataset.Genes <- raw_dataset.merged[,"Gene.ID"||"GeneID"]
raw_dataset.Genes <- raw_dataset.merged[,"Gene.ID||GeneID"]
raw_dataset.Genes <- raw_dataset.merged[,"Gene.ID|GeneID"]
raw_dataset.Genes <- raw_dataset.merged[,"Gene.ID"|"GeneID"]
"Gene.ID" %in% colnames(raw_dataset.merged)
grep("Gene.ID", colnames(raw_dataset.merged))
"GeneID" %in% colnames(raw_dataset.merged)
grep("Gene.ID|ZT|CT", colnames(raw_dataset.merged))
colnumbers.to.keep <- grep("Gene.ID|ZT|CT", colnames(raw_dataset.merged))
raw_dataset.Genes <- raw_dataset.merged[,colnumbers.to.keep]
View(raw_dataset.Genes)
View(raw_dataset)
View(raw_dataset.merged)
Column.number
main.dir <- "/scratch/cluster/monthly/dlaloum/Documents/Workspace")
main.dir <- "/scratch/cluster/monthly/dlaloum/Documents/Workspace"
file.dir <- paste(main.dir, "DATA/Protein.coding.genes", class, species, tissue, sep = "/")
file.dir
file.dir <- paste(paste("/scratch/cluster/monthly/dlaloum/Documents/Workspace/DATA/Protein.coding.genes", class, species, tissue, sep = "/"),"/", sep="")
file.dir
file.dir <- paste(main.dir, "DATA/Protein.coding.genes", class, species, tissue, sep = "/")
file.dir <- paste(main.dir, "DATA/Protein.coding.genes", class, species, tissue, sep = "/")
file.dir
file.dir <- paste(paste(main.dir, "DATA/Protein.coding.genes", class, species, tissue, sep = "/"), "/", sep="")
file.dir
IDs.crossRef_dir <- paste(paste(main.dir, "DATA/Protein.coding.genes", class, species, sep = "/"), "/", sep="")
IDs.crossRef_dir
R.objects_dir <- paste(paste(main.dir, "R_Objects", sep = "/"), "/", sep="")
R.objects_dir
rows.to.remove_R.object <- paste(R.objects_dir, "rows.to.remove", species, tissue, ".rds", sep="")
rows.to.remove_R.object
rows.to.remove_R.object <- paste(R.objects_dir, "rows.to.remove_", species, "_", tissue, ".rds", sep="")
rows.to.remove_R.object
if (dir.exists("/scratch/cluster/monthly/dlaloum/")==TRUE){
main.dir <- "/scratch/cluster/monthly/dlaloum/Documents/Workspace"
} else {
main.dir <- "~/Documents/Workspace"
}
file.dir <- paste(paste(main.dir, "DATA/Protein.coding.genes", class, species, tissue, sep = "/"), "/", sep="")
IDs.crossRef_dir <- paste(paste(main.dir, "DATA/Protein.coding.genes", class, species, sep = "/"), "/", sep="")
R.objects_dir <- paste(paste(main.dir, "R_Objects", sep = "/"), "/", sep="")
rows.to.remove_R.object <- paste(R.objects_dir, "rows.to.remove_", species, "_", tissue, ".rds", sep="")
rows.to.remove_R.object
file.exists(rows.to.remove_R.object)
rows.to.remove_R.object
Column.name <- colnames(IDs.crossRef)[unique(unlist(apply(IDs.crossRef, 1, function(x) which(x == raw_dataset$ID[1] | x == raw_dataset$ID[3] | x == raw_dataset$ID[5] ))))]
Column.name
paste("echo Do you want a RPKM per gene normalization ? yes/no ;
read yes.no ;
Rscript Test_script.R", species, tissue, "$yes.no", sep=" ")
paste("$",species, sep="")
paste("echo Do you want a RPKM per gene normalization ? yes/no ;
read yes.no ;
Rscript Test_script.R", paste("$",species, sep=""), paste("$",tissue, sep=""), "$yes.no")
file.dir
paste(file.dir, tissue, "_per.gene.txt", sep = "")
raw_dataset.Genes
View(raw_dataset.Genes)
length(unique(raw_dataset.Genes$Gene.ID))
mean.dataset_per.gene <- aggregate(raw_dataset.Genes[-1], raw_dataset.Genes[1], mean)
View(mean.dataset_per.gene)
source("https://bioconductor.org/biocLite.R")
biocLite("EmpiricalBrownsMethod")
library("EmpiricalBrownsMethod")
?empiricalBrownsMethod
data(ebmTestData)
ebmTestData
data(ebmTestData)
pathways
View(pathways)
allPvals
dat
View(allPvals)
View(dat)
